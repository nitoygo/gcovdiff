        -:    0:Source:hexdump.c
        -:    0:Graph:hexdump.gcno
        -:    0:Data:hexdump.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
        1:    3:void hexDump (char *desc, void *addr, int len) {
        -:    4:    int i;
        -:    5:    unsigned char buff[17];
        1:    6:    unsigned char *pc = (unsigned char*)addr;
        -:    7:
        1:    8:    printf("dump start\n");
        -:    9:
        -:   10:    // Output description if given.
        1:   11:    if (desc != NULL)
        1:   12:        printf ("%s:\n", desc);
        -:   13:
        1:   14:    if (len == 0) {
    #####:   15:        printf("  ZERO LENGTH\n");
    #####:   16:        return;
        -:   17:    }
        1:   18:    if (len < 0) {
    #####:   19:        printf("  NEGATIVE LENGTH: %i\n",len);
    #####:   20:        return;
        -:   21:    }
        -:   22:
        -:   23:    // Process every byte in the data.
       37:   24:    for (i = 0; i < len; i++) {
        -:   25:        // Multiple of 16 means new line (with line offset).
        -:   26:
       36:   27:        if ((i % 16) == 0) {
        -:   28:            // Just don't print ASCII for the zeroth line.
        3:   29:            if (i != 0) {
        2:   30:                printf ("  %s\n", buff);
        -:   31:            }
        -:   32:
        -:   33:            // Output the offset.
        3:   34:            printf ("  %04x ", i);
        -:   35:        }
        -:   36:
        -:   37:        // Now the hex code for the specific character.
       36:   38:        printf (" %02x", pc[i]);
        -:   39:
        -:   40:        // And store a printable ASCII character for later.
       36:   41:        if ((pc[i] < 0x20) || (pc[i] > 0x7e))
        1:   42:            buff[i % 16] = '.';
        -:   43:        else
       35:   44:            buff[i % 16] = pc[i];
       36:   45:        buff[(i % 16) + 1] = '\0';
        -:   46:    }
        -:   47:
        -:   48:    // Pad out last line if not exactly 16 characters.
       14:   49:    while ((i % 16) != 0) {
       12:   50:        printf ("   ");
       12:   51:        i++;
        -:   52:    }
        -:   53:
        -:   54:    // And print the final ASCII bit.
        1:   55:    printf ("  %s\n", buff);
        -:   56:}
        -:   57:
        1:   58:int main (int argc, char *argv[]) {
        1:   59:    char my_str[] = "a char string greater than 16 chars";
        1:   60:    hexDump ("my_str", &my_str, sizeof (my_str));
        1:   61:    return 0;
        -:   62:}
        -:   63:
